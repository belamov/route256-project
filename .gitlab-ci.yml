image: golang:1.21

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'push'

stages:
  - check
  - build


test cart:
  stage: check
  before_script:
    - go install github.com/boumenot/gocover-cobertura@latest
  script:
    - cd cart
    - go vet ./...
    - go test -v -coverprofile=.testCoverageCart.txt -covermode count ./...
  after_script:
    - gocover-cobertura < .testCoverageCart.txt > coverageCart.xml
  coverage: '/coverage: \d+.\d+% of statements/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: cart/coverageCart.xml

lint cart:
  stage: check
  image: golangci/golangci-lint:v1.54.2
  script:
    - cd cart
    - golangci-lint run -v

fmt cart:
  stage: check
  script:
    - go install mvdan.cc/gofumpt@latest
    - cd cart
    - test -z "$(gofumpt -d -e . | tee /dev/stderr)"

test loms:
  stage: check
  script:
    - cd loms
    - go vet ./...
    - go test -v -coverprofile=.testCoverageLoms.txt -covermode count ./...
    - pwd
    - ls -la
  after_script:
    - pwd
    - ls -la
    - gocover-cobertura < .testCoverageLoms.txt > coverageLoms.xml
  coverage: '/coverage: \d+.\d+% of statements/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: loms/coverageLoms.xml

lint loms:
  stage: check
  image: golangci/golangci-lint:v1.54.2
  script:
    - cd cart
    - golangci-lint run -v

fmt loms:
  stage: check
  script:
    - go install mvdan.cc/gofumpt@latest
    - cd loms
    - test -z "$(gofumpt -d -e . | tee /dev/stderr)"

build cart:
  stage: build
  script:
    - go build ./cart/cmd/app


build loms:
  stage: build
  script:
    - go build ./loms/cmd/app
