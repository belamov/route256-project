// Code generated by MockGen. DO NOT EDIT.
// Source: route256/loms/internal/app/domain/services (interfaces: StocksProvider)
//
// Generated by this command:
//
//	mockgen -destination=internal/app/domain/services/stock_provider_mock.go -package=services route256/loms/internal/app/domain/services StocksProvider
//
// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"
	models "route256/loms/internal/app/domain/models"

	gomock "go.uber.org/mock/gomock"
)

// MockStocksProvider is a mock of StocksProvider interface.
type MockStocksProvider struct {
	ctrl     *gomock.Controller
	recorder *MockStocksProviderMockRecorder
}

// MockStocksProviderMockRecorder is the mock recorder for MockStocksProvider.
type MockStocksProviderMockRecorder struct {
	mock *MockStocksProvider
}

// NewMockStocksProvider creates a new mock instance.
func NewMockStocksProvider(ctrl *gomock.Controller) *MockStocksProvider {
	mock := &MockStocksProvider{ctrl: ctrl}
	mock.recorder = &MockStocksProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStocksProvider) EXPECT() *MockStocksProviderMockRecorder {
	return m.recorder
}

// GetBySku mocks base method.
func (m *MockStocksProvider) GetBySku(arg0 context.Context, arg1 uint32) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySku", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySku indicates an expected call of GetBySku.
func (mr *MockStocksProviderMockRecorder) GetBySku(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySku", reflect.TypeOf((*MockStocksProvider)(nil).GetBySku), arg0, arg1)
}

// Reserve mocks base method.
func (m *MockStocksProvider) Reserve(arg0 context.Context, arg1 models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reserve", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reserve indicates an expected call of Reserve.
func (mr *MockStocksProviderMockRecorder) Reserve(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reserve", reflect.TypeOf((*MockStocksProvider)(nil).Reserve), arg0, arg1)
}

// ReserveCancel mocks base method.
func (m *MockStocksProvider) ReserveCancel(arg0 context.Context, arg1 models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveCancel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReserveCancel indicates an expected call of ReserveCancel.
func (mr *MockStocksProviderMockRecorder) ReserveCancel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveCancel", reflect.TypeOf((*MockStocksProvider)(nil).ReserveCancel), arg0, arg1)
}

// ReserveRemove mocks base method.
func (m *MockStocksProvider) ReserveRemove(arg0 context.Context, arg1 models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveRemove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReserveRemove indicates an expected call of ReserveRemove.
func (mr *MockStocksProviderMockRecorder) ReserveRemove(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveRemove", reflect.TypeOf((*MockStocksProvider)(nil).ReserveRemove), arg0, arg1)
}
