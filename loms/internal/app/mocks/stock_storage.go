// Code generated by MockGen. DO NOT EDIT.
// Source: route256/loms/internal/app/services (interfaces: StocksStorage)
//
// Generated by this command:
//
//	mockgen -destination=internal/app/mocks/stock_storage.go -package=services route256/loms/internal/app/services StocksStorage
//
// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"
	models "route256/loms/internal/app/models"

	gomock "go.uber.org/mock/gomock"
)

// MockStocksStorage is a mock of StocksStorage interface.
type MockStocksStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStocksStorageMockRecorder
}

// MockStocksStorageMockRecorder is the mock recorder for MockStocksStorage.
type MockStocksStorageMockRecorder struct {
	mock *MockStocksStorage
}

// NewMockStocksStorage creates a new mock instance.
func NewMockStocksStorage(ctrl *gomock.Controller) *MockStocksStorage {
	mock := &MockStocksStorage{ctrl: ctrl}
	mock.recorder = &MockStocksStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStocksStorage) EXPECT() *MockStocksStorageMockRecorder {
	return m.recorder
}

// Reserve mocks base method.
func (m *MockStocksStorage) Reserve(arg0 context.Context, arg1 models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reserve", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reserve indicates an expected call of Reserve.
func (mr *MockStocksStorageMockRecorder) Reserve(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reserve", reflect.TypeOf((*MockStocksStorage)(nil).Reserve), arg0, arg1)
}

// ReserveCancel mocks base method.
func (m *MockStocksStorage) ReserveCancel(arg0 context.Context, arg1 models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveCancel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReserveCancel indicates an expected call of ReserveCancel.
func (mr *MockStocksStorageMockRecorder) ReserveCancel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveCancel", reflect.TypeOf((*MockStocksStorage)(nil).ReserveCancel), arg0, arg1)
}

// ReserveRemove mocks base method.
func (m *MockStocksStorage) ReserveRemove(arg0 context.Context, arg1 models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveRemove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReserveRemove indicates an expected call of ReserveRemove.
func (mr *MockStocksStorageMockRecorder) ReserveRemove(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveRemove", reflect.TypeOf((*MockStocksStorage)(nil).ReserveRemove), arg0, arg1)
}
