// Code generated by MockGen. DO NOT EDIT.
// Source: route256/loms/internal/app/services (interfaces: MessagesProvider)
//
// Generated by this command:
//
//	mockgen -destination=internal/app/services/messages_provider_mock.go -package=services route256/loms/internal/app/services MessagesProvider
//
// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"
	models "route256/loms/internal/app/models"

	gomock "go.uber.org/mock/gomock"
)

// MockMessagesProvider is a mock of MessagesProvider interface.
type MockMessagesProvider struct {
	ctrl     *gomock.Controller
	recorder *MockMessagesProviderMockRecorder
}

// MockMessagesProviderMockRecorder is the mock recorder for MockMessagesProvider.
type MockMessagesProviderMockRecorder struct {
	mock *MockMessagesProvider
}

// NewMockMessagesProvider creates a new mock instance.
func NewMockMessagesProvider(ctrl *gomock.Controller) *MockMessagesProvider {
	mock := &MockMessagesProvider{ctrl: ctrl}
	mock.recorder = &MockMessagesProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessagesProvider) EXPECT() *MockMessagesProviderMockRecorder {
	return m.recorder
}

// ClearLocks mocks base method.
func (m *MockMessagesProvider) ClearLocks(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearLocks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearLocks indicates an expected call of ClearLocks.
func (mr *MockMessagesProviderMockRecorder) ClearLocks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearLocks", reflect.TypeOf((*MockMessagesProvider)(nil).ClearLocks), arg0, arg1)
}

// GetFailedMessages mocks base method.
func (m *MockMessagesProvider) GetFailedMessages(arg0 context.Context, arg1 string) ([]models.OutboxFailedMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailedMessages", arg0, arg1)
	ret0, _ := ret[0].([]models.OutboxFailedMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailedMessages indicates an expected call of GetFailedMessages.
func (mr *MockMessagesProviderMockRecorder) GetFailedMessages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailedMessages", reflect.TypeOf((*MockMessagesProvider)(nil).GetFailedMessages), arg0, arg1)
}

// GetLockedUnsentMessages mocks base method.
func (m *MockMessagesProvider) GetLockedUnsentMessages(arg0 context.Context, arg1 string) ([]models.OutboxMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLockedUnsentMessages", arg0, arg1)
	ret0, _ := ret[0].([]models.OutboxMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLockedUnsentMessages indicates an expected call of GetLockedUnsentMessages.
func (mr *MockMessagesProviderMockRecorder) GetLockedUnsentMessages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLockedUnsentMessages", reflect.TypeOf((*MockMessagesProvider)(nil).GetLockedUnsentMessages), arg0, arg1)
}

// LockUnsentMessages mocks base method.
func (m *MockMessagesProvider) LockUnsentMessages(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockUnsentMessages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockUnsentMessages indicates an expected call of LockUnsentMessages.
func (mr *MockMessagesProviderMockRecorder) LockUnsentMessages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockUnsentMessages", reflect.TypeOf((*MockMessagesProvider)(nil).LockUnsentMessages), arg0, arg1)
}

// SaveMessage mocks base method.
func (m *MockMessagesProvider) SaveMessage(arg0 context.Context, arg1 models.OutboxMessage) (models.OutboxMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMessage", arg0, arg1)
	ret0, _ := ret[0].(models.OutboxMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveMessage indicates an expected call of SaveMessage.
func (mr *MockMessagesProviderMockRecorder) SaveMessage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMessage", reflect.TypeOf((*MockMessagesProvider)(nil).SaveMessage), arg0, arg1)
}

// SetMessageFailed mocks base method.
func (m *MockMessagesProvider) SetMessageFailed(arg0 context.Context, arg1 models.OutboxMessage, arg2 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMessageFailed", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMessageFailed indicates an expected call of SetMessageFailed.
func (mr *MockMessagesProviderMockRecorder) SetMessageFailed(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMessageFailed", reflect.TypeOf((*MockMessagesProvider)(nil).SetMessageFailed), arg0, arg1, arg2)
}

// SetMessageSent mocks base method.
func (m *MockMessagesProvider) SetMessageSent(arg0 context.Context, arg1 models.OutboxMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMessageSent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMessageSent indicates an expected call of SetMessageSent.
func (mr *MockMessagesProviderMockRecorder) SetMessageSent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMessageSent", reflect.TypeOf((*MockMessagesProvider)(nil).SetMessageSent), arg0, arg1)
}
