// Code generated by MockGen. DO NOT EDIT.
// Source: route256/loms/internal/app/services (interfaces: MessagesProducer)
//
// Generated by this command:
//
//	mockgen -destination=internal/app/services/messages_producer_mock.go -package=services route256/loms/internal/app/services MessagesProducer
//
// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"
	models "route256/loms/internal/app/models"

	gomock "go.uber.org/mock/gomock"
)

// MockMessagesProducer is a mock of MessagesProducer interface.
type MockMessagesProducer struct {
	ctrl     *gomock.Controller
	recorder *MockMessagesProducerMockRecorder
}

// MockMessagesProducerMockRecorder is the mock recorder for MockMessagesProducer.
type MockMessagesProducerMockRecorder struct {
	mock *MockMessagesProducer
}

// NewMockMessagesProducer creates a new mock instance.
func NewMockMessagesProducer(ctrl *gomock.Controller) *MockMessagesProducer {
	mock := &MockMessagesProducer{ctrl: ctrl}
	mock.recorder = &MockMessagesProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessagesProducer) EXPECT() *MockMessagesProducerMockRecorder {
	return m.recorder
}

// Fails mocks base method.
func (m *MockMessagesProducer) Fails() <-chan models.OutboxFailedMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fails")
	ret0, _ := ret[0].(<-chan models.OutboxFailedMessage)
	return ret0
}

// Fails indicates an expected call of Fails.
func (mr *MockMessagesProducerMockRecorder) Fails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fails", reflect.TypeOf((*MockMessagesProducer)(nil).Fails))
}

// ProduceMessage mocks base method.
func (m *MockMessagesProducer) ProduceMessage(arg0 context.Context, arg1 models.OutboxMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceMessage indicates an expected call of ProduceMessage.
func (mr *MockMessagesProducerMockRecorder) ProduceMessage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceMessage", reflect.TypeOf((*MockMessagesProducer)(nil).ProduceMessage), arg0, arg1)
}

// Successes mocks base method.
func (m *MockMessagesProducer) Successes() <-chan models.OutboxMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Successes")
	ret0, _ := ret[0].(<-chan models.OutboxMessage)
	return ret0
}

// Successes indicates an expected call of Successes.
func (mr *MockMessagesProducerMockRecorder) Successes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Successes", reflect.TypeOf((*MockMessagesProducer)(nil).Successes))
}
