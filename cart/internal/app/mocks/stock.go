// Code generated by MockGen. DO NOT EDIT.
// Source: route256/cart/internal/app/services (interfaces: StocksService)
//
// Generated by this command:
//
//	mockgen -destination=internal/app/mocks/stock.go -package=services route256/cart/internal/app/services StocksService
//
// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStocksService is a mock of StocksService interface.
type MockStocksService struct {
	ctrl     *gomock.Controller
	recorder *MockStocksServiceMockRecorder
}

// MockStocksServiceMockRecorder is the mock recorder for MockStocksService.
type MockStocksServiceMockRecorder struct {
	mock *MockStocksService
}

// NewMockStocksService creates a new mock instance.
func NewMockStocksService(ctrl *gomock.Controller) *MockStocksService {
	mock := &MockStocksService{ctrl: ctrl}
	mock.recorder = &MockStocksServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStocksService) EXPECT() *MockStocksServiceMockRecorder {
	return m.recorder
}

// GetStocksInfo mocks base method.
func (m *MockStocksService) GetStocksInfo(arg0 context.Context, arg1 uint32) (uint16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStocksInfo", arg0, arg1)
	ret0, _ := ret[0].(uint16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStocksInfo indicates an expected call of GetStocksInfo.
func (mr *MockStocksServiceMockRecorder) GetStocksInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStocksInfo", reflect.TypeOf((*MockStocksService)(nil).GetStocksInfo), arg0, arg1)
}
