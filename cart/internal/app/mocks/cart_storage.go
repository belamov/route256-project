// Code generated by MockGen. DO NOT EDIT.
// Source: route256/cart/internal/app/services (interfaces: CartStorage)
//
// Generated by this command:
//
//	mockgen -destination=internal/app/mocks/cart_storage.go -package=services route256/cart/internal/app/services CartStorage
//
// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"
	models "route256/cart/internal/app/models"

	gomock "go.uber.org/mock/gomock"
)

// MockCartStorage is a mock of CartStorage interface.
type MockCartStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCartStorageMockRecorder
}

// MockCartStorageMockRecorder is the mock recorder for MockCartStorage.
type MockCartStorageMockRecorder struct {
	mock *MockCartStorage
}

// NewMockCartStorage creates a new mock instance.
func NewMockCartStorage(ctrl *gomock.Controller) *MockCartStorage {
	mock := &MockCartStorage{ctrl: ctrl}
	mock.recorder = &MockCartStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartStorage) EXPECT() *MockCartStorageMockRecorder {
	return m.recorder
}

// DeleteItem mocks base method.
func (m *MockCartStorage) DeleteItem(arg0 context.Context, arg1 models.CartItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockCartStorageMockRecorder) DeleteItem(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockCartStorage)(nil).DeleteItem), arg0, arg1)
}

// DeleteItemsByUserId mocks base method.
func (m *MockCartStorage) DeleteItemsByUserId(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItemsByUserId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItemsByUserId indicates an expected call of DeleteItemsByUserId.
func (mr *MockCartStorageMockRecorder) DeleteItemsByUserId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItemsByUserId", reflect.TypeOf((*MockCartStorage)(nil).DeleteItemsByUserId), arg0, arg1)
}

// GetItemsByUserId mocks base method.
func (m *MockCartStorage) GetItemsByUserId(arg0 context.Context, arg1 int64) ([]models.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsByUserId", arg0, arg1)
	ret0, _ := ret[0].([]models.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsByUserId indicates an expected call of GetItemsByUserId.
func (mr *MockCartStorageMockRecorder) GetItemsByUserId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsByUserId", reflect.TypeOf((*MockCartStorage)(nil).GetItemsByUserId), arg0, arg1)
}

// SaveItem mocks base method.
func (m *MockCartStorage) SaveItem(arg0 context.Context, arg1 models.CartItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveItem indicates an expected call of SaveItem.
func (mr *MockCartStorageMockRecorder) SaveItem(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveItem", reflect.TypeOf((*MockCartStorage)(nil).SaveItem), arg0, arg1)
}
